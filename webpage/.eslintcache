[{"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\index.js":"1","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\App.js":"2","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\reportWebVitals.js":"3","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Timeline\\Timeline.js":"4","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\TimeCard\\TimeCard.js":"5","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\GridContainer\\GridContainer.js":"6","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\GridItem\\GridItem.js":"7","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Timeline\\reducer\\TimelineReducer.js":"8","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Loading\\Loading.js":"9","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Login\\Login.js":"10","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Login\\reducer\\LoginReducer.js":"11","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Register\\Register.js":"12","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Register\\reducer\\RegisterReducer.js":"13","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\NewPost\\NewPost.js":"14","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Post\\Post.js":"15","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Post\\reducer\\PostReducer.js":"16","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\Comment\\Comment.js":"17","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Home\\Home.js":"18","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Home\\Reducer\\HomeReducer.js":"19","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\DevelopInfo\\DevelopInfo.js":"20","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Account\\Account.js":"21","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Account\\ChangePassword\\ChangePassword.js":"22","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Account\\EditProfile\\EditProfile.js":"23"},{"size":500,"mtime":1609393954129,"results":"24","hashOfConfig":"25"},{"size":1201,"mtime":1611553540194,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1609393954129,"results":"27","hashOfConfig":"25"},{"size":9288,"mtime":1611301593308,"results":"28","hashOfConfig":"25"},{"size":5245,"mtime":1611560972428,"results":"29","hashOfConfig":"25"},{"size":258,"mtime":1609516588702,"results":"30","hashOfConfig":"25"},{"size":243,"mtime":1609516586559,"results":"31","hashOfConfig":"25"},{"size":825,"mtime":1611296266048,"results":"32","hashOfConfig":"25"},{"size":414,"mtime":1610950129609,"results":"33","hashOfConfig":"25"},{"size":5619,"mtime":1609911204769,"results":"34","hashOfConfig":"25"},{"size":478,"mtime":1609825445018,"results":"35","hashOfConfig":"25"},{"size":4076,"mtime":1609831490042,"results":"36","hashOfConfig":"25"},{"size":484,"mtime":1609831592175,"results":"37","hashOfConfig":"25"},{"size":5798,"mtime":1610425738324,"results":"38","hashOfConfig":"25"},{"size":10260,"mtime":1611208990559,"results":"39","hashOfConfig":"25"},{"size":493,"mtime":1610522740476,"results":"40","hashOfConfig":"25"},{"size":1500,"mtime":1610701262378,"results":"41","hashOfConfig":"25"},{"size":9532,"mtime":1611561006319,"results":"42","hashOfConfig":"25"},{"size":899,"mtime":1611551188127,"results":"43","hashOfConfig":"25"},{"size":719,"mtime":1611305207504,"results":"44","hashOfConfig":"25"},{"size":3189,"mtime":1611558204259,"results":"45","hashOfConfig":"25"},{"size":263,"mtime":1611558134697,"results":"46","hashOfConfig":"25"},{"size":2918,"mtime":1611564611775,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1bdsnzj",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\index.js",[],["104","105"],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\App.js",["106"],"import './App.css';\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\"\n\nimport Home from \"./views/Home/Home\";\nimport Timeline from './views/Timeline/Timeline';\nimport Login from './views/Login/Login';\nimport Register from './views/Register/Register';\n\n\nimport NewPost from './views/NewPost/NewPost';\nimport Account from './views/Account/Account';\n\nfunction App() {\n\n  // useEffect(() => {\n  //   // 일반 경로 테스트\n  //   axios.get('/example')\n  //     .then( ({ data }) => console.log(\"example test:\", data) )\n  //     .catch( e => console.log(e) );\n\n  //   // DB 연동 테스트\n  //   axios.get('/example/database')\n  //     .then( ({ data }) => console.log(\"database test:\", data) )\n  //     .catch( e => console.log(e) );\n  // }, [])\n\n  // react-router\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/account\" component={Account} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/timeline/:email\" component={Timeline} />\n        <Redirect to='/'/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\reportWebVitals.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Timeline\\Timeline.js",["107","108","109"],"import React, { useEffect, useReducer, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Box, Button, Dialog } from \"@material-ui/core\";\r\nimport Logo from \"../../sources/instagram_title.png\";\r\n\r\nimport { IoPersonSharp, IoLogoInstagram } from \"react-icons/io5\";\r\nimport { CgPen, CgTag } from \"react-icons/cg\";\r\nimport { MdAddAPhoto } from \"react-icons/md\";\r\n\r\nimport GridContainer from \"../../components/GridContainer/GridContainer\";\r\nimport GridItem from \"../../components/GridItem/GridItem\";\r\nimport { CHANGE_DATA, CHANGE_DATA_STRUCT, TimelineInit, TimelineReduce } from \"./reducer/TimelineReducer\";\r\n\r\nimport Loading from \"../Loading/Loading\";\r\nimport NewPost from \"../NewPost/NewPost\";\r\nimport Post from \"../Post/Post\";\r\n\r\nconst maxWidth = \"50rem\";\r\nconst borderColor = \"#999999\"\r\n\r\nconst Timeline = ({ history, location, match }) => {\r\n    const source = axios.CancelToken.source();\r\n\r\n    const { email } = match.params; // 주소로 넘어오는 정보 ( /:email )\r\n    const [ state, dispatch ] = useReducer(TimelineReduce, TimelineInit);\r\n    const { login, user, posts, isLoading } = state;\r\n    // const { email, username, count } = user;\r\n\r\n    const axiosTimeline = () => {\r\n        dispatch({ type: CHANGE_DATA, data: { isLoading: true }});\r\n        axios.post(`/api/timeline/profile/${email}`, { jwt: localStorage.getItem('access_token') }, { cancelToken: source.token })\r\n            .then( ({ data: { login, timeline } }) => {\r\n                if( !timeline ) return console.log(`can't find user`);\r\n        \r\n                // console.log(login, timeline );\r\n                const { posts, ...others } = timeline;\r\n                // 데이터 세팅\r\n                dispatch({ type: CHANGE_DATA,\r\n                    data: {\r\n                        isLoading: false,\r\n                        login: login || '',\r\n                        user: others,\r\n                        posts: posts || [],\r\n                    }\r\n                })\r\n            })\r\n            .catch( e => { if( !axios.isCancel(e) ) console.log(e); });\r\n    }\r\n\r\n    useEffect(() => {\r\n        axiosTimeline();\r\n        return () => {\r\n            source.cancel();\r\n        }\r\n    }, [])\r\n\r\n    // 다이얼로그 창\r\n    const [ dialog, setDialog ] = useState('');\r\n    const onCloseDialog = () => setDialog(''); // 창 닫기\r\n    const onCloseDialogWithReload = () => {\r\n        axiosTimeline(); // 리스트 갱신\r\n        setDialog(''); // 창 닫기\r\n    }\r\n\r\n    // 포스트 상세보기\r\n    const onClickPost = ({ currentTarget: { id }}) => {\r\n        setDialog(id);\r\n    }\r\n\r\n    // 새 포스트 등록 기능\r\n    const onClickWritePost = ({ currentTarget: { id }}) => {\r\n        setDialog(id);\r\n    };\r\n\r\n    // 팔로우 옵션\r\n    const onClickFollow = () => {\r\n        axios.post('/api/follow', { jwt: localStorage.getItem('access_token'), following: email, type: !user.onFollow }, { cancelToken: source.token })\r\n            .then(({data}) => {\r\n                // console.log(data);\r\n                dispatch({ type: CHANGE_DATA_STRUCT, target: \"user\", data: { onFollow: !user.onFollow }})\r\n            })\r\n            .catch( e => {\r\n                if(axios.isCancel(e)) return;\r\n                alert(e);\r\n            })\r\n    }\r\n\r\n    return (\r\n        isLoading\r\n        ? <Loading /> \r\n        :\r\n        <Box bgcolor=\"#f7f7f7\" height=\"100vh\" overflow=\"auto\">\r\n        <Box id=\"timeline-header\" bgcolor=\"#ffffff\"\r\n            position=\"fixed\" top=\"0\" height=\"4rem\" width=\"100vw\" \r\n            borderBottom={1} borderColor={borderColor}>\r\n            <Box display=\"flex\" width=\"100vw\" maxWidth={maxWidth} margin=\"auto\" height=\"4rem\"\r\n                alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Box id=\"timeline-header-logo\">\r\n                    <img title=\"instagram-logo\" src={Logo} style={{ height: \"8rem\", width: \"auto\" }} />\r\n                </Box>\r\n                <Box id=\"timeline-header-user\">{ login }</Box>\r\n            </Box>\r\n        </Box>\r\n        <Box id=\"timeline-profile\" marginTop=\"4rem\">\r\n            <Box width=\"100vw\" maxWidth={maxWidth} margin=\"auto\" borderBottom={1} borderColor={borderColor} \r\n                display=\"flex\" padding=\"2rem\">\r\n                <Box id=\"timeline-profile-img\" flex={1} display=\"flex\" justifyContent=\"center\">\r\n                    <Box border={3} borderColor=\"#ffa4a4\" bgcolor=\"white\"\r\n                        width=\"10rem\" height=\"10rem\" borderRadius=\"5rem\" overflow=\"hidden\" \r\n                        display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                        <IoPersonSharp size=\"6rem\" color=\"black\"/>\r\n                    </Box>\r\n                </Box>\r\n                <Box id=\"timeline-profile-info\" flex={2} >\r\n                    <Box id=\"timeline-profile-email\" marginBottom=\"1rem\"\r\n                        display=\"flex\" alignItem=\"center\">\r\n                        <Box marginRight=\"1.5rem\" fontSize=\"1.8rem\" fontWeight=\"fontWeightLight\" >{ user.email }</Box>\r\n                        {\r\n                            login && login !== email &&\r\n                            <Button size=\"small\" onClick={onClickFollow} style={{ border: \"1px blue solid\" }}>\r\n                            { user.onFollow ? \"언팔로우\" : \"팔로우\" }\r\n                            </Button>\r\n                        }\r\n                    </Box>\r\n                    <Box id=\"timeline-profile-count\" marginBottom=\"1rem\"\r\n                        display=\"flex\" alignItems=\"space-between\">\r\n                        <Box flex={1}>게시글 <Box display=\"inline\" fontWeight=\"fontWeightBold\">{ user.count.post }</Box></Box>\r\n                        <Box flex={1}>팔로워 <Box display=\"inline\" fontWeight=\"fontWeightBold\">{ user.count.follower }</Box></Box>\r\n                        <Box flex={1}>팔로우 <Box display=\"inline\" fontWeight=\"fontWeightBold\">{ user.count.following }</Box></Box>\r\n                    </Box>\r\n                    <Box id=\"timeline-profile-introduce\" fontSize=\"1rem\">\r\n                        <Box fontWeight=\"fontWeightBold\">\r\n                            { user.username }\r\n                        </Box>\r\n                        <Box>\r\n                            자기소개\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n        <Box id=\"timeline-content\">\r\n            <Box width=\"100vw\" maxWidth={maxWidth} margin=\"auto\">\r\n                <Box id=\"timeline-content-tab\" marginBottom=\"10px\"\r\n                    display=\"flex\" justifyContent=\"center\" alignItems=\"center\"\r\n                    fontSize=\"0.9rem\" fontWeight=\"700\">\r\n                    <Box width=\"100px\" height=\"3rem\" textAlign=\"center\" lineHeight=\"3rem\">\r\n                        <CgPen size=\"0.9rem\"/>&nbsp;&nbsp;게시물\r\n                    </Box>\r\n                    <Box width=\"100px\" height=\"3rem\" textAlign=\"center\" lineHeight=\"3rem\">\r\n                        <CgTag size=\"0.9rem\"/>&nbsp;&nbsp;태그됨\r\n                    </Box>\r\n                </Box>\r\n                <GridContainer spacing={4} justify=\"flex-start\">\r\n                    { login === email &&\r\n                        <GridItem xs={4} key={'post-create'}>\r\n                            <Box overflow=\"hidden\" border={1} borderColor=\"#565656\" \r\n                                id=\"post-create\" style={{ cursor: \"pointer\" }} onClick={onClickWritePost}\r\n                                width=\"30vw\" maxWidth=\"15rem\" height=\"30vw\" maxHeight=\"15rem\" margin=\"auto\"\r\n                                display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                                <MdAddAPhoto size=\"5rem\" />\r\n                            </Box>\r\n                        </GridItem>\r\n                    }\r\n                    {\r\n                        posts.map(({ pid, picture }, idx) => {\r\n                            return (\r\n                                <GridItem xs={4} key={`post-${idx}`}>\r\n                                    <Box overflow=\"hidden\" border={1} borderColor=\"#565656\"\r\n                                        width=\"30vw\" maxWidth=\"15rem\" height=\"30vw\" maxHeight=\"15rem\" margin=\"auto\"\r\n                                        display=\"flex\" alignItems=\"center\" justifyContent=\"center\" \r\n                                        onClick={onClickPost} id={pid}>\r\n                                        {/* <IoLogoInstagram size=\"5rem\" /> */}\r\n                                        <img src={`/api/timeline/html-img/${picture[0]}`} style={{ maxWidth: \"100%\", maxHeight: \"100%\"}} alt={`게시글 대표 이미지-${idx}`} />\r\n                                    </Box>\r\n                                </GridItem>\r\n                            )\r\n                        })\r\n                    }\r\n                </GridContainer>\r\n            </Box>\r\n        </Box>\r\n        <Dialog maxWidth=\"md\" open={!!dialog && dialog !== \"post-create\"} onClose={onCloseDialog}>\r\n            <Post pid={dialog} onClose={onCloseDialog} />\r\n        </Dialog>\r\n        <Dialog maxWidth=\"md\" open={dialog === \"post-create\"} onClose={onCloseDialog}>\r\n            <NewPost email={email} onClose={onCloseDialogWithReload} />\r\n        </Dialog>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Timeline;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\TimeCard\\TimeCard.js",["110","111","112"],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\GridContainer\\GridContainer.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\GridItem\\GridItem.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Timeline\\reducer\\TimelineReducer.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Loading\\Loading.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Login\\Login.js",["113"],"import React, { useEffect, useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport { Box, Button, CircularProgress } from '@material-ui/core';\r\nimport Title from \"../../sources/instagram_title.png\"\r\nimport { Link } from 'react-router-dom';\r\nimport { LoginInit, LoginReduce } from './reducer/LoginReducer';\r\nimport { CHANGE_DATA } from '../Timeline/reducer/TimelineReducer';\r\n\r\nconst Login = ({ history }) => {\r\n\r\n    const source = axios.CancelToken.source();\r\n\r\n    const [ state, dispatch ] = useReducer(LoginReduce, LoginInit);\r\n    const { isLoading, identify, error } = state; // 각종 정보들\r\n    const { email, password } = identify; // 입력정보\r\n\r\n    // 입력함수\r\n    const onChangeInput = ({ currentTarget: { id, value }}) => {\r\n        const [ target, name ] = id.split('-');\r\n        dispatch({ type: CHANGE_DATA, \r\n            data: {\r\n                [target]: {\r\n                    ...state[target],\r\n                    [name]: value\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // 에러 타입 확인\r\n    const errorType = () => {\r\n        switch (error) {\r\n            case 401:\r\n                return \"잘못된 비밀번호입니다. 다시 확인하세요.\";        \r\n            case 500:\r\n                return \"Instagram에 연결할 수 없습니다. 인터넷에 연결되어 있는지 확인한 후 다시 시도해보세요.\";\r\n            default:\r\n                return \"알 수 없는 오류입니다. 잠시 후 다시 시도해주세요.\";\r\n                // throw new Error(\"cant find error type\");\r\n        }\r\n    }\r\n\r\n    const onClickSubmit = () => {\r\n        dispatch({ type: CHANGE_DATA, data: { isLoading: true }});\r\n        axios.post('/api/identify/login', identify, { cancelToken: source.token })\r\n            .then( ({ data }) => {\r\n                console.log(data);\r\n\r\n                // 로그인 실패\r\n                if( !data ) {\r\n                    return dispatch({ type: CHANGE_DATA, data: {\r\n                        isLoading: false,\r\n                        error: 401,\r\n                    }})\r\n                }\r\n                // 로컬저장소에 정보 저장 ( 실제론 jwt 정보가 저장되어야 함 )\r\n                localStorage.setItem('access_token', email);\r\n                return history.push(`/timeline/${email}`);\r\n            })\r\n            .catch( e => {\r\n                if( axios.isCancel(e) ) return; // 취소인 경우 무시\r\n                if( e.config && e.config.url ) { // 네트워크 오류 검사\r\n                    dispatch({ type: CHANGE_DATA, data: {\r\n                        isLoading: false,\r\n                        error: 500,\r\n                    }})\r\n                }\r\n                else {\r\n                    dispatch({ type: CHANGE_DATA, data: {\r\n                        isLoading: false,\r\n                        error: e.response && e.response.status,\r\n                    }})\r\n                }\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if(localStorage.getItem('jwt')) history.replace(`/timeline/${localStorage.getItem('jwt')}`);\r\n        return () => {\r\n            source.cancel();\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Box id=\"login-page\" width=\"100vw\" height=\"100vh\" bgcolor=\"#eeeeee\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Box id=\"input-space\" width=\"19rem\" height=\"35rem\"\r\n                display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Box bgcolor=\"#ffffff\" width=\"100%\" height=\"70%\"\r\n                    border={1} borderColor=\"#aaaaaa\" padding=\"2rem\">\r\n                    <Box width=\"100%\" height=\"5rem\" overflow=\"hidden\" marginBottom=\"1rem\"\r\n                        display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                        <img src={Title} alt=\"instagram_logo\" style={{ width: \"70%\" }}/>\r\n                    </Box>\r\n                    <Box width=\"100%\">\r\n                        <input placeholder=\"전화번호, 사용자 이름 또는 이메일\" value={email} id=\"identify-email\" onChange={onChangeInput}\r\n                            style={{ width: \"98%\", height: \"2.1rem\", background: \"#eeeeee\", borderColor: \"#aaaaaa\", borderRadius: \"3px\", marginBottom: \"0.5rem\" }}/>\r\n                        <input placeholder=\"비밀번호\" type=\"password\" value={password} id=\"identify-password\" onChange={onChangeInput}\r\n                            style={{ width: \"98%\", height: \"2.1rem\", background: \"#eeeeee\", borderColor: \"#aaaaaa\", borderRadius: \"3px\", marginBottom: \"1rem\" }}/>\r\n                        <Button onClick={onClickSubmit} fullWidth variant=\"contained\" color=\"primary\" style={{ height: \"2.2rem\" }}>\r\n                            { !isLoading ? \"로그인\" : <CircularProgress size=\"1.3rem\" color=\"inherit\" /> }\r\n                        </Button>\r\n                    </Box>\r\n                    <Box width=\"100%\" marginTop=\"1rem\" textAlign=\"center\" whiteSpace=\"wrap\" color=\"red\">{ error && errorType() }</Box>\r\n                </Box>\r\n                <Box bgcolor=\"#ffffff\" width=\"100%\" height=\"4%\" \r\n                    display=\"flex\" alignItems=\"center\" justifyContent=\"center\"\r\n                    border={1} borderColor=\"#aaaaaa\" padding=\"2rem\">\r\n                    <Box textAlign=\"center\">\r\n                        계정이 없으신가요? <Link style={{ color: \"#3399ff\", fontWeight: \"700\", textDecoration: \"none\" }} to=\"/register\">가입하기</Link>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Login;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Login\\reducer\\LoginReducer.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Register\\Register.js",["114","115"],"import React, { useEffect, useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport { Box, Button, CircularProgress } from '@material-ui/core';\r\nimport Title from \"../../sources/instagram_title.png\"\r\nimport { Link } from 'react-router-dom';\r\nimport { RegisterInit, RegisterReduce } from './reducer/RegisterReducer';\r\nimport { CHANGE_DATA } from '../Timeline/reducer/TimelineReducer';\r\n\r\nconst Register = ({ history }) => {\r\n\r\n    const [ state, dispatch ] = useReducer(RegisterReduce, RegisterInit);\r\n    const { isLoading, identify, error } = state; // 각종 정보들\r\n    const { email, password } = identify; // 입력정보\r\n\r\n    // 입력함수\r\n    const onChangeInput = ({ currentTarget: { id, value }}) => {\r\n        const [ target, name ] = id.split('-');\r\n        dispatch({ type: CHANGE_DATA, \r\n            data: {\r\n                [target]: {\r\n                    ...state[target],\r\n                    [name]: value\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // 에러 타입 확인\r\n    const errorType = () => {\r\n        switch (error) {\r\n            case 401:\r\n                return \"잘못된 비밀번호입니다. 다시 확인하세요.\";        \r\n            case 500:\r\n                return \"Instagram에 연결할 수 없습니다. 인터넷에 연결되어 있는지 확인한 후 다시 시도해보세요.\";\r\n            default:\r\n                throw new Error(\"cant find error type\");\r\n        }\r\n    }\r\n\r\n    const onClickSubmit = () => {\r\n        dispatch({ type: CHANGE_DATA, data: { isLoading: true }});\r\n        alert(\"로그인 구현 필요\");\r\n        // axios.post('/api/')\r\n    }\r\n\r\n    return (\r\n        <Box id=\"login-page\" width=\"100vw\" height=\"100vh\" bgcolor=\"#eeeeee\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n            <Box id=\"input-space\" width=\"19rem\" height=\"35rem\"\r\n                display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Box bgcolor=\"#ffffff\" width=\"100%\" height=\"70%\"\r\n                    border={1} borderColor=\"#aaaaaa\" padding=\"2rem\">\r\n                    <Box width=\"100%\" height=\"5rem\" overflow=\"hidden\" marginBottom=\"1rem\"\r\n                        display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                        <img src={Title} alt=\"instagram_logo\" style={{ width: \"70%\" }}/>\r\n                    </Box>\r\n                    <Box width=\"100%\">\r\n                        <input placeholder=\"전화번호, 사용자 이름 또는 이메일\" value={email} id=\"identify-email\" onChange={onChangeInput}\r\n                            style={{ width: \"98%\", height: \"2.1rem\", background: \"#eeeeee\", borderColor: \"#aaaaaa\", borderRadius: \"3px\", marginBottom: \"0.5rem\" }}/>\r\n                        <input placeholder=\"비밀번호\" type=\"password\" value={password} id=\"identify-password\" onChange={onChangeInput}\r\n                            style={{ width: \"98%\", height: \"2.1rem\", background: \"#eeeeee\", borderColor: \"#aaaaaa\", borderRadius: \"3px\", marginBottom: \"1rem\" }}/>\r\n                        <Button onClick={onClickSubmit} fullWidth variant=\"contained\" color=\"primary\" style={{ height: \"2.2rem\" }}>\r\n                            { !isLoading ? \"가입\" : <CircularProgress size=\"1.3rem\" color=\"#ffffff\" /> }\r\n                        </Button>\r\n                    </Box>\r\n                    <Box width=\"100%\" marginTop=\"1rem\" textAlign=\"center\" whiteSpace=\"wrap\" color=\"red\">{ error && errorType() }</Box>\r\n                </Box>\r\n                <Box bgcolor=\"#ffffff\" width=\"100%\" height=\"4%\" \r\n                    display=\"flex\" alignItems=\"center\" justifyContent=\"center\"\r\n                    border={1} borderColor=\"#aaaaaa\" padding=\"2rem\">\r\n                    <Box textAlign=\"center\">\r\n                        계정이 있으신가요? <Link style={{ color: \"#3399ff\", fontWeight: \"700\", textDecoration: \"none\" }} to=\"/login\">로그인</Link>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Register;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Register\\reducer\\RegisterReducer.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\NewPost\\NewPost.js",["116","117"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Box, Button, IconButton } from \"@material-ui/core\";\r\nimport { useTransition, animated } from \"react-spring\";\r\n\r\nimport { MdKeyboardArrowLeft, MdKeyboardArrowRight } from \"react-icons/md\";\r\nimport { BsPlusSquareFill } from \"react-icons/bs\";\r\n\r\nimport IMG from \"../../sources/instagram_logo.png\";\r\n\r\n// react-spring 참고 링크\r\n// https://www.react-spring.io/docs/hooks/examples\r\n\r\n// 신규 포스트 등록 화면\r\nconst NewPost = ({ email, onClose }) => {\r\n\r\n    const source = axios.CancelToken.source();\r\n\r\n    const [ page, setPage ] = useState(0); // 현재 페이지 번호\r\n    const [ localImgs, setLocalImgs ] = useState([]); // 로컬 파일 정보\r\n    const [ images, setImages ] = useState([]); // 이미지 리스트\r\n\r\n    // 좌,우 버튼 클릭 함수\r\n    const onClickLeft = () => setPage(page-1);\r\n    const onClickRight = () => setPage(page+1);\r\n\r\n    // 애니메이션 옵션\r\n    // 사용할 인덱스, ??, 애니메이션 스타일\r\n    const transitions = useTransition(page, p => p, { \r\n        from: { opacity: 0, transform: 'translate3d(100%,0,0)' }, // 좌측\r\n        enter: { opacity: 1, transform: 'translate3d(0%,0,0)' }, // 중앙\r\n        leave: { opacity: 0, transform: 'translate3d(-50%,0,0)' }, // 우측\r\n    });\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            source.cancel();\r\n        }\r\n    }, [])\r\n\r\n    // 로컬 파일 등록\r\n    const onChangeAddImg = ({ currentTarget: { files: { length, ...fileList } }}) => {\r\n        let arr = [];\r\n        for(const idx in fileList){\r\n            // console.log(fileList[idx]);\r\n            arr.push( fileList[idx] );\r\n        }\r\n        setLocalImgs([...localImgs, ...arr]);\r\n        setImages([ ...images, ...arr.map( file => URL.createObjectURL(file)) ]);\r\n    }\r\n\r\n    // 게시글 등록 버튼\r\n    const onClickSubmit = () => {\r\n        if(!images.length) return alert(\"최소 1개 이상의 사진 등록이 필요합니다.\");\r\n\r\n        console.log(localStorage);\r\n        // console.log(localImgs);\r\n        const formData = new FormData();\r\n        formData.append('jwt', localStorage.getItem('access_token'));\r\n        formData.append('email', email)\r\n        for(const img of localImgs) {\r\n            // console.log(idx);\r\n            formData.append(\"localImgs\", img);\r\n        }\r\n        formData.append(\"text\", \"test-text\");\r\n\r\n        axios.put(\"/api/timeline/write-post\", formData, { cancelToken: source.token })\r\n            .then(({ data }) => {\r\n                // 등록에 완료하면, 창 닫기\r\n                onClose();\r\n            })\r\n            .catch( e => {\r\n                if(!axios.isCancel(e)) return alert(e);\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    // / minHeight=\"50vh\" maxHeight=\"80vh\"\r\n    return (\r\n        <Box width=\"100vw\" maxWidth=\"50rem\" height=\"auto\" display=\"flex\">\r\n            <Box id=\"img-space\" flex={5} position=\"relative\" minHeight=\"50vh\" maxHeight=\"80vh\">\r\n                { // 실제 화면을 띄우는 위치. animation 객체를 사용\r\n                    transitions.map(({ item, props, key }) => {\r\n                        return <animated.div key={key} props={props} /* style={{ position: \"absolute\", width: \"100%\", height: \"100%\" }}*/>\r\n                            <Box position=\"absolute\" width=\"100%\" height=\"100%\" bgcolor=\"white\" overflow=\"hidden\"\r\n                                display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                                { images[item] \r\n                                    ? <img src={images[item]} alt={`등록 이미지-${item}`} \r\n                                        style={{ display: \"block\", minWidth:\"50%\", minHeight: \"50%\", maxHeight: \"100%\", objectFit: \"cover\" }} /> \r\n                                    : <>\r\n                                        <label htmlFor=\"img-space-add\" style={{ cursor: \"pointer\" }}><BsPlusSquareFill size=\"5rem\" /></label>\r\n                                        <input onChange={onChangeAddImg} type=\"file\" multiple accept=\".jpg, .png, .jpeg\" id=\"img-space-add\" style={{ display: \"none\" }} />\r\n                                    </>\r\n                                }\r\n                            </Box>\r\n                        </animated.div>;\r\n                    })\r\n                }\r\n                    {/* <img src={IMG} /> */}\r\n                { // 좌측에 추가 이미지가 있을 때만 활성화\r\n                    images.length && 0 < page &&\r\n                    <IconButton id=\"img-btn-left\" onClick={onClickLeft}\r\n                        style={{ position: \"absolute\", left: \"5px\", top: \"50%\", transform: \"translateY(-50%)\", background: \"#aaaaaa\", color: \"#ffffff\", opacity: \"0.5\" }}>\r\n                        <MdKeyboardArrowLeft color=\"inherit\" />\r\n                    </IconButton>\r\n                }\r\n                { // 우측에 추가 이미지가 있을 때만 활성화\r\n                    page < images.length &&\r\n                    <IconButton id=\"img-btn-right\" onClick={onClickRight}\r\n                        style={{ position: \"absolute\", right: \"5px\", top: \"50%\", transform: \"translateY(-50%)\", background: \"#aaaaaa\", color: \"#ffffff\", opacity: \"0.5\" }}>\r\n                        <MdKeyboardArrowRight color=\"inherit\"/>\r\n                    </IconButton>\r\n                }\r\n            </Box>\r\n            <Box id=\"text-space\" flex={3} borderLeft={1} borderColor=\"#aaaaaa\" display=\"flex\" flexDirection=\"column\">\r\n                <Box>작성자정보</Box>\r\n                <Box>내용내여ㅛㅇ</Box>\r\n                <Button id=\"btn-submit\" onClick={onClickSubmit}>게시글 등록</Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NewPost;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Post\\Post.js",["118","119","120","121","122"],"import React, { useEffect, useReducer, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Box, Button, IconButton, Input, InputAdornment, Link, TextField } from \"@material-ui/core\";\r\nimport { useTransition, animated } from \"react-spring\";\r\n\r\nimport { MdKeyboardArrowLeft, MdKeyboardArrowRight } from \"react-icons/md\";\r\nimport { BsThreeDots } from \"react-icons/bs\";\r\nimport { AiFillHeart, AiOutlineHeart } from \"react-icons/ai\";\r\nimport { IoChatbubbleOutline, IoPaperPlaneOutline } from \"react-icons/io5\";\r\nimport { BsBookmark, BsBookmarkFill } from \"react-icons/bs\";\r\n\r\nimport { CHANGE_DATA, PostInit, PostReduce } from \"./reducer/PostReducer\";\r\nimport IMG from \"../../sources/instagram_logo.png\";\r\nimport Comment from \"../../components/Comment/Comment\";\r\nimport Loading from \"../../views/Loading/Loading\";\r\n\r\n// react-spring 참고 링크\r\n// https://www.react-spring.io/docs/hooks/examples\r\n\r\n// 신규 포스트 등록 화면\r\nconst Post = ({ pid }) => {\r\n\r\n    const source = axios.CancelToken.source();\r\n\r\n    const [ state, dispatch ] = useReducer(PostReduce, PostInit);\r\n    const { isLoading, page, post } = state;\r\n    const { picture, content, writer, comments } = post;\r\n    // 버튼 사용 가능 여부\r\n    const [ disabled, setDisabled ] = useState({\r\n        newComment: true,\r\n    })\r\n    // 기능 활성화 여부 ( 좋아요, 북태그 )\r\n    const [ actived, setActived ] = useState({\r\n        like: false,\r\n        bookmark: false,\r\n    })\r\n    // 새 덧글\r\n    const [ newComment, setNewComment ] = useState('');\r\n\r\n    // const [ page, setPage ] = useState(0); // 현재 페이지 번호\r\n    // const [ images, setImages ] = useState([]); // 이미지 리스트\r\n\r\n    // 좌,우 버튼 클릭 함수\r\n    const onClickLeft = () => dispatch({ type: CHANGE_DATA, data: { page: page - 1 }});\r\n    const onClickRight = () => dispatch({ type: CHANGE_DATA, data: { page: page + 1 }});\r\n\r\n    // 애니메이션 옵션\r\n    // 사용할 인덱스, ??, 애니메이션 스타일\r\n    const transitions = useTransition(page, p => p, { \r\n        from: { opacity: 0, transform: 'translate3d(100%,0,0)' }, // 좌측\r\n        enter: { opacity: 1, transform: 'translate3d(0%,0,0)' }, // 중앙\r\n        leave: { opacity: 0, transform: 'translate3d(-50%,0,0)' }, // 우측\r\n    });\r\n\r\n\r\n    const axiosPost = () => {\r\n        dispatch({ type: CHANGE_DATA, data: { isLoading: true }});\r\n        axios.get(`/api/timeline/post/${pid}`, { cancelToken: source.token })\r\n            .then(({ data }) => {\r\n                console.log(data);\r\n                dispatch({ type: CHANGE_DATA,\r\n                    data: { \r\n                        isLoading: false,\r\n                        post: data,\r\n                    }\r\n                })\r\n            })\r\n            .catch(e => {\r\n                if(axios.isCancel(e)) return;\r\n                alert(e);\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        axiosPost();\r\n        return () => {\r\n            source.cancel();\r\n        }\r\n    }, []);\r\n\r\n    // 상단 버튼\r\n    const onClickProfileMenu = () => {\r\n        alert(\"버튼버튼\")\r\n    }\r\n\r\n    // 하단 버튼 ( 좋아요, 북마크 )\r\n    const onClickIcon = ({ currentTarget: { id }}) => {\r\n        console.log(id);\r\n        setActived({ ...actived, [id]: !actived[id] });\r\n    }\r\n    // 게시글 입력\r\n    const onChangeAddCommnet = ({ target: { name, value }}) => {\r\n        setDisabled({ [name]: !value.trim() });\r\n        setNewComment(value);\r\n    }\r\n    \r\n    // 덧글 입력\r\n    const onClickAddComment = () => {\r\n        if(disabled.newComment) return alert(\"등록 불가능\");\r\n        axios.post(`/api/timeline/add-comment/${pid}`, { jwt: localStorage.getItem('access_token'), content: newComment }, { cancelToken: source.token })\r\n            .then( ({ data }) => {\r\n                console.log(data);\r\n                setNewComment(''); // 글 비우기\r\n                axiosPost(); // 리로딩\r\n            })\r\n            .catch( e => {\r\n                if(axios.isCancel(e)) return;\r\n                alert(e);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Box width=\"100vw\" maxWidth=\"50rem\" display=\"flex\">\r\n            {\r\n                isLoading\r\n                ? <Box width=\"100%\" height=\"60vh\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                    <img src={IMG} alt=\"로딩 이미지\" style={{ maxHeight: \"40%\", maxWidth: \"40%\" }} />\r\n                    </Box>\r\n                : <>\r\n                    <Box id=\"img-space\" flex={5} position=\"relative\" minHeight=\"60vh\" maxHeight=\"80vh\">\r\n                    { // 실제 화면을 띄우는 위치. animation 객체를 사용\r\n                        transitions.map(({ item, props, key }) => {\r\n                            return <animated.div key={key} props={props} /* style={{ position: \"absolute\", width: \"100%\", height: \"100%\" }}*/>\r\n                                <Box position=\"absolute\" width=\"100%\" height=\"100%\" bgcolor=\"white\"\r\n                                    display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                                    { picture[item] && <img src={`/api/timeline/html-img/${picture[item]}`} alt={`등록 이미지 - ${item}`} style={{ minWidth: \"50%\", maxWidth: \"100%\", minHeight: \"50%\", maxHeight: \"100%\" }} /> }\r\n                                </Box>\r\n                            </animated.div>;\r\n                        })\r\n                    }\r\n                        {/* <img src={IMG} /> */}\r\n                    { // 좌측에 추가 이미지가 있을 때만 활성화\r\n                        picture.length && 0 < page &&\r\n                        <IconButton id=\"img-btn-left\" onClick={onClickLeft}\r\n                            style={{ position: \"absolute\", left: \"0\", top: \"50%\", transform: \"translateY(-50%)\" }}>\r\n                            <MdKeyboardArrowLeft />\r\n                        </IconButton>\r\n                    }\r\n                    { // 우측에 추가 이미지가 있을 때만 활성화\r\n                        page < picture.length - 1 &&\r\n                        <IconButton id=\"img-btn-right\" onClick={onClickRight}\r\n                            style={{ position: \"absolute\", right: \"0\", top: \"50%\", transform: \"translateY(-50%)\" }}>\r\n                            <MdKeyboardArrowRight />\r\n                        </IconButton>\r\n                    }\r\n                </Box>\r\n                <Box id=\"text-space\" flex={3} borderLeft={1} display=\"flex\" flexDirection=\"column\" borderColor=\"#aaaaaa\"\r\n                    overflow=\"auto\" maxHeight=\"60vh\" position=\"relative\">\r\n                    <Box borderBottom={1} height=\"4rem\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\"\r\n                        position=\"absolute\" top=\"0\" width=\"100%\">\r\n                        <Box flex={3} display=\"flex\" justifyContent=\"center\">\r\n                            <img src={IMG} alt=\"user-profile\"\r\n                                style={{ width: \"2rem\", height: \"2rem\", borderRadius: \"1rem\", border: \"2px red solid\" }}/>\r\n                        </Box>\r\n                        <Box flex={8} fontWeight=\"600\">\r\n                            { writer.email }\r\n                        </Box>\r\n                        <IconButton onClick={onClickProfileMenu}>\r\n                            <BsThreeDots />\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Box marginTop=\"4rem\" marginBottom=\"10rem\" overflow=\"auto\">\r\n                        { comments.map( comment => <Comment comment={comment} /> ) }\r\n                    </Box>\r\n                    <Box position=\"absolute\" bottom=\"0\" width=\"100%\">\r\n                        <Box height=\"5.5rem\" borderTop={1} padding=\"0.5rem\">\r\n                            <Box display=\"flex\" justifyContent=\"space-between\">\r\n                                <Box display=\"flex\" width=\"40%\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                    { actived.like \r\n                                        ? <AiFillHeart id=\"like\" size=\"2rem\" onClick={onClickIcon} style={{ cursor: \"pointer\" }} />\r\n                                        : <AiOutlineHeart id=\"like\" size=\"2rem\" onClick={onClickIcon} style={{ cursor: \"pointer\" }} />\r\n                                    }\r\n                                    <IoChatbubbleOutline size=\"2rem\" onClick={onClickIcon} style={{ cursor: \"pointer\" }} />\r\n                                    <IoPaperPlaneOutline size=\"2rem\" onClick={onClickIcon} style={{ cursor: \"pointer\" }}  />\r\n                                </Box>\r\n                                <Box>\r\n                                    { actived.bookmark \r\n                                        ? <BsBookmarkFill id=\"bookmark\" size=\"2rem\" onClick={onClickIcon} style={{ cursor: \"pointer\" }} /> \r\n                                        : <BsBookmark id=\"bookmark\" size=\"2rem\" onClick={onClickIcon} style={{ cursor: \"pointer\" }} />\r\n                                    }\r\n                                </Box>\r\n                            </Box>\r\n                            <Box>정보</Box>\r\n                            <Box fontSize=\"0.7rem\" color=\"grey\">날짜</Box>\r\n                        </Box>\r\n                        <Box height=\"3.5rem\" borderTop={1} display-=\"flex\" flexDirection=\"column\">\r\n                            <Input style={{ width: \"100%\", height: \"100%\", padding: \"0 4%\" }}\r\n                                name=\"newComment\" value={newComment} onChange={onChangeAddCommnet}\r\n                                disableUnderline={true} placeholder=\"댓글 달기...\"\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                    <Button disabled={disabled.newComment} onClick={onClickAddComment}\r\n                                        style={{ color: disabled.newComment ? \"#99ccff\" : \"blue\", fontWeight: \"600\" }}>게시</Button>\r\n                                    </InputAdornment>\r\n                                } />\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                </>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Post;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Post\\reducer\\PostReducer.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\Comment\\Comment.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Home\\Home.js",["123","124","125","126","127","128"],"import React, { useEffect, useReducer, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Box, Button, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport { AiFillHeart } from \"react-icons/ai\";\r\nimport Logo from \"../../sources/instagram_title.png\";\r\n\r\nimport Loading from \"../Loading/Loading\";\r\nimport TimeCard from \"../../components/TimeCard/TimeCard\";\r\nimport DevelopInfo from \"../../components/DevelopInfo/DevelopInfo\";\r\nimport { CHANGE_DATA, CHANGE_DATA_STRUCT, homeInit, homeReduce } from \"./Reducer/HomeReducer\";\r\n\r\nimport IMG from \"../../sources/instagram_logo.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// 메인 페이지 (홈)\r\nconst Home = ({ history }) => {\r\n\r\n    const source = axios.CancelToken.source();\r\n    const [ state, dispatch ] = useReducer(homeReduce, homeInit);\r\n    const { isLoading, identify, error, user } = state;\r\n    const { email, posts } = user;\r\n\r\n    // 로그인 상태 체크\r\n    const axiosUser = () => {\r\n        console.log(localStorage.getItem('access_token'), email);\r\n        if( !localStorage.getItem('access_token') ) return;\r\n        dispatch({ type: CHANGE_DATA, data: { isLoading: true }});\r\n        axios.post('/api/home/', { jwt: localStorage.getItem('access_token') }, { cancelToken: source.token })\r\n            .then( ({ data }) => {\r\n                console.log(data);\r\n                dispatch({ type: CHANGE_DATA, data: { \r\n                    user: data,\r\n                    isLoading: false \r\n                }});\r\n            })\r\n            .catch( e => {\r\n                if(axios.isCancel(e)) return;\r\n                alert(e);\r\n                dispatch({ type: CHANGE_DATA, data: { isLoading: false }});\r\n            })\r\n    }\r\n\r\n    // 로그아웃 버튼\r\n    const onClickLogOut = () => {\r\n        localStorage.removeItem('access_token'); // 저장정보 삭제\r\n        history.go(0);\r\n    }\r\n\r\n    // 로그인 요청\r\n    const onClickSubmit = () => {\r\n        dispatch({ type: CHANGE_DATA, data: { isLoading: true }});\r\n        axios.post('/api/identify/login', identify, { cancelToken: source.token })\r\n            .then( ({ data }) => {\r\n                console.log(data);\r\n\r\n                // 로그인 실패\r\n                if( !data ) {\r\n                    return dispatch({ type: CHANGE_DATA, data: {\r\n                        isLoading: false,\r\n                        error: 401,\r\n                    }})\r\n                }\r\n                // 로컬저장소에 정보 저장 ( 실제론 jwt 정보가 저장되어야 함 )\r\n                localStorage.setItem('access_token', identify.email);\r\n                // history.go(0);\r\n                axiosUser();\r\n                dispatch({ type: CHANGE_DATA, data: { isLoading: false }});\r\n                // return history.push(`/timeline/${email}`);\r\n            })\r\n            .catch( e => {\r\n                if( axios.isCancel(e) ) return; // 취소인 경우 무시\r\n                if( e.config && e.config.url ) { // 네트워크 오류 검사\r\n                    dispatch({ type: CHANGE_DATA, data: {\r\n                        isLoading: false,\r\n                        error: 500,\r\n                    }})\r\n                }\r\n                else {\r\n                    dispatch({ type: CHANGE_DATA, data: {\r\n                        isLoading: false,\r\n                        error: e.response && e.response.status,\r\n                    }})\r\n                }\r\n            })\r\n    }\r\n\r\n    // 입력값\r\n    const onChangeInput = ({ currentTarget: { id, value }}) => {\r\n        const [ target, name ] = id.split('-');\r\n        dispatch({ type: CHANGE_DATA_STRUCT, target: target, data: { [name]: value }});\r\n    }\r\n\r\n    // 에러 타입 확인\r\n    const errorType = () => {\r\n        switch (error) {\r\n            case 401:\r\n                return \"잘못된 비밀번호입니다. 다시 확인하세요.\";        \r\n            case 500:\r\n                return \"Instagram에 연결할 수 없습니다. 인터넷에 연결되어 있는지 확인한 후 다시 시도해보세요.\";\r\n            default:\r\n                return \"알 수 없는 오류입니다. 잠시 후 다시 시도해주세요.\";\r\n                // throw new Error(\"cant find error type\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        axiosUser();\r\n        return () => {\r\n            source.cancel();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        isLoading\r\n        ? <Loading />\r\n        : \r\n        <>\r\n        {\r\n            email\r\n            ? \r\n            <Box bgcolor=\"#f7f7f7\" height=\"100vh\" overflow=\"auto\">\r\n                <Box id=\"timeline-header\" bgcolor=\"#ffffff\" zIndex=\"10\"\r\n                    position=\"fixed\" top=\"0\" height=\"4rem\" width=\"100vw\" \r\n                    borderBottom={1} borderColor=\"#999999\">\r\n                    <Box display=\"flex\" width=\"100vw\" maxWidth=\"50rem\" margin=\"auto\" height=\"4rem\"\r\n                        alignItems=\"center\" justifyContent=\"space-between\">\r\n                        <Box id=\"timeline-header-logo\" display=\"flex\" alignItems=\"center\">\r\n                            <img title=\"instagram-logo\" src={Logo} style={{ height: \"8rem\", width: \"auto\" }} />\r\n                        </Box>\r\n                        <Box id=\"timeline-header-user\">\r\n                            <Link to={`/timeline/${email}`} style={{ color: \"black\", textDecoration: \"none\", marginRight: \"1rem\" }}>{ email }</Link>\r\n                            <Button size=\"small\" variant=\"outlined\" color=\"secondary\" onClick={onClickLogOut}>로그아웃</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <Box id=\"timeline-profile\" marginTop=\"6rem\">\r\n                    <Box width=\"100vw\" maxWidth=\"50rem\" margin=\"auto\" display=\"flex\">\r\n                        <Box flex={2}>\r\n                            {\r\n                                posts.length > 0 \r\n                                ? posts.map( post => <TimeCard post={post} /> )\r\n                                : <Box width=\"100%\" bgcolor=\"white\" borderColor=\"#aaaaaa\" border={1} height=\"10rem\">새로 작성된 게시글 없음</Box>\r\n                            }\r\n                        </Box>\r\n                        {/* <Box flex={1}></Box> */}\r\n                        <Box flex={1} //position=\"fixed\" right={window.innerWidth < 800 ? 0 : (window.innerWidth - 800)/2} \r\n                            padding=\"1.8rem\" display=\"flex\" flexDirection=\"column\">\r\n                            { /* 여기 고정위치로 수정할것 */ }\r\n                            <Box id=\"my-profile\" display=\"flex\" alignItems=\"center\">\r\n                                <Box marginRight=\"1rem\" display=\"flex\" alignItems=\"center\">\r\n                                    <img src={IMG} alt=\"my-profile-image\"\r\n                                        style={{ width: \"3rem\", height: \"3rem\", borderRadius: \"1.5rem\", border: \"1px #999999 solid\" }}/>\r\n                                </Box>\r\n                                <Box flex={1}>\r\n                                    <Box fontWeight=\"600\">{ email }</Box>\r\n                                    <Box fontSize=\"0.8rem\" color=\"#777777\">사용자 이름 넣을 공간</Box>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            :\r\n            <Box width=\"100vw\" height=\"100vh\" bgcolor=\"#f7f7f7\"\r\n                display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                    <Box width=\"100vw\" maxWidth=\"50rem\" display=\"flex\" justifyContent=\"space-between\">\r\n                        <Box width=\"50%\">\r\n                            <DevelopInfo />\r\n                        </Box>\r\n                        <Box width=\"35%\" padding=\"2rem\"\r\n                            bgcolor=\"#ffffff\" borderColor=\"#999999\" border={1}>\r\n                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" marginBottom=\"1rem\"\r\n                                height=\"5rem\" overflow=\"hidden\" >\r\n                                <img src={Logo} style={{ maxWidth: \"70%\" }} />\r\n                            </Box>\r\n                            <Box width=\"100%\">\r\n                                <input placeholder=\"전화번호, 사용자 이름 또는 이메일\" value={identify.email} id=\"identify-email\" onChange={onChangeInput}\r\n                                    style={{ width: \"98%\", height: \"2.1rem\", background: \"#eeeeee\", borderColor: \"#aaaaaa\", borderRadius: \"3px\", marginBottom: \"0.5rem\" }}/>\r\n                                <input placeholder=\"비밀번호\" type=\"password\" value={identify.password} id=\"identify-password\" onChange={onChangeInput}\r\n                                    style={{ width: \"98%\", height: \"2.1rem\", background: \"#eeeeee\", borderColor: \"#aaaaaa\", borderRadius: \"3px\", marginBottom: \"1rem\" }}/>\r\n                                <Button onClick={onClickSubmit} fullWidth variant=\"contained\" color=\"primary\" style={{ height: \"2.2rem\" }}>\r\n                                    { !isLoading ? \"로그인\" : <CircularProgress size=\"1.3rem\" color=\"inherit\" /> }\r\n                                </Button>\r\n                            </Box>\r\n                            <Box width=\"100%\" marginTop=\"1rem\" textAlign=\"center\" whiteSpace=\"wrap\" color=\"red\">{ error && errorType() }</Box>\r\n                        </Box>\r\n                    </Box>\r\n            </Box>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Home\\Reducer\\HomeReducer.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\components\\DevelopInfo\\DevelopInfo.js",[],"D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Account\\Account.js",["129","130","131","132","133"],"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nimport Logo from \"../../sources/instagram_title.png\";\r\nimport EditProfile from \"./EditProfile/EditProfile\";\r\nimport ChangePassword from \"./ChangePassword/ChangePassword\";\r\n\r\nconst borderColor = \"#aaaaaa\";\r\nconst maxWidth = \"50rem\";\r\n\r\nconst Account = () => {\r\n    // 메뉴 리스트 (상수)\r\n    const menuList = [\r\n        { title: \"프로필 편집\", component: <EditProfile />},\r\n        { title: \"비밀번호 변경\", component: <ChangePassword /> },\r\n    ]\r\n    \r\n    // 메뉴 선택 관련\r\n    const [ hover, setHover ] = useState(-1);\r\n    const [ select, setSelect ] = useState(0);\r\n\r\n    const onClickMenu = ({ currentTarget: { id }}) => {\r\n        const [ target, number ] = id.split('-');\r\n        setSelect(parseInt(number));\r\n    };\r\n    const onMouseEnterMenu = ({ currentTarget: { id }}) => {\r\n        const [ target, number ] = id.split('-');\r\n        setHover(parseInt(number));\r\n    };\r\n    const onMouseLeaveMenu = () => setHover(-1);\r\n\r\n    return <Box bgcolor=\"#f7f7f7\" height=\"100vh\" overflow=\"auto\">\r\n        <Box id=\"timeline-header\" bgcolor=\"#ffffff\"\r\n            position=\"fixed\" top=\"0\" height=\"4rem\" width=\"100vw\" \r\n            borderBottom={1} borderColor=\"#aaaaaa\">\r\n            <Box display=\"flex\" width=\"100vw\" maxWidth={maxWidth} margin=\"auto\" height=\"4rem\"\r\n                alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Box id=\"timeline-header-logo\">\r\n                    <img title=\"instagram-logo\" src={Logo} style={{ height: \"8rem\", width: \"auto\" }} />\r\n                </Box>\r\n                <Box id=\"timeline-header-user\">애옹애옹</Box>\r\n            </Box>\r\n        </Box>\r\n        <Box id=\"timeline-profile\" marginTop=\"6rem\">\r\n            <Box display=\"flex\" justifyContent=\"space-between\" border={1} borderColor=\"#aaaaaa\"\r\n                width=\"100vw\" maxWidth={maxWidth} margin=\"auto\" minHeight=\"80vh\" bgcolor=\"white\">\r\n                <Box display=\"flex\" flexDirection=\"column\">\r\n                    { // 메뉴 출력\r\n                        menuList.map( ({ title }, idx) => \r\n                            <Box id={`menu-${idx}`} key={`menu-${idx}`} width=\"12rem\" display=\"flex\" alignItems=\"center\"\r\n                                onClick={onClickMenu} onMouseEnter={onMouseEnterMenu} onMouseLeave={onMouseLeaveMenu}\r\n                                paddingLeft=\"1.6rem\" paddingTop=\"1rem\" paddingBottom=\"1rem\"\r\n                                bgcolor={ idx !== select && idx === hover ? \"#f5f5f5\" : \"white\" } fontWeight={ idx === select ? \"700\" : \"500\" }\r\n                                borderLeft={2} borderColor={ idx === select ? \"black\" : ( idx === hover ? \"#aaaaaa\" : \"white\")}>\r\n                                { title }\r\n                            </Box>\r\n                        )\r\n                    }\r\n                </Box>\r\n                <Box flex=\"1\" minHeight=\"100%\" borderLeft={1} borderColor=\"#aaaaaa\" padding=\"2rem\">\r\n                    { menuList[select].component }\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    </Box>\r\n}\r\n\r\nexport default Account;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Account\\ChangePassword\\ChangePassword.js",["134"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nconst ChangePassword = () => {\r\n    return <Box width=\"100%\" height=\"100%\">\r\n            비밀번호 변경\r\n        </Box>\r\n\r\n}\r\n\r\nexport default ChangePassword;","D:\\Visual Studio Code Project\\React-Native\\sns_clone\\webpage\\src\\views\\Account\\EditProfile\\EditProfile.js",["135"],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":10,"column":8,"nodeType":"142","messageId":"143","endLine":10,"endColumn":15},{"ruleId":"140","severity":1,"message":"144","line":6,"column":25,"nodeType":"142","messageId":"143","endLine":6,"endColumn":40},{"ruleId":"145","severity":1,"message":"146","line":55,"column":8,"nodeType":"147","endLine":55,"endColumn":10,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":99,"column":21,"nodeType":"151","endLine":99,"endColumn":104},{"ruleId":"140","severity":1,"message":"152","line":10,"column":8,"nodeType":"142","messageId":"143","endLine":10,"endColumn":21},{"ruleId":"140","severity":1,"message":"153","line":11,"column":8,"nodeType":"142","messageId":"143","endLine":11,"endColumn":16},{"ruleId":"149","severity":1,"message":"150","line":65,"column":17,"nodeType":"151","endLine":66,"endColumn":110},{"ruleId":"145","severity":1,"message":"154","line":82,"column":8,"nodeType":"147","endLine":82,"endColumn":10,"suggestions":"155"},{"ruleId":"140","severity":1,"message":"156","line":1,"column":17,"nodeType":"142","messageId":"143","endLine":1,"endColumn":26},{"ruleId":"140","severity":1,"message":"157","line":2,"column":8,"nodeType":"142","messageId":"143","endLine":2,"endColumn":13},{"ruleId":"140","severity":1,"message":"158","line":9,"column":8,"nodeType":"142","messageId":"143","endLine":9,"endColumn":11},{"ruleId":"145","severity":1,"message":"154","line":39,"column":8,"nodeType":"147","endLine":39,"endColumn":10,"suggestions":"159"},{"ruleId":"140","severity":1,"message":"160","line":3,"column":58,"nodeType":"142","messageId":"143","endLine":3,"endColumn":62},{"ruleId":"140","severity":1,"message":"161","line":3,"column":64,"nodeType":"142","messageId":"143","endLine":3,"endColumn":73},{"ruleId":"140","severity":1,"message":"162","line":15,"column":8,"nodeType":"142","messageId":"143","endLine":15,"endColumn":15},{"ruleId":"140","severity":1,"message":"163","line":27,"column":22,"nodeType":"142","messageId":"143","endLine":27,"endColumn":29},{"ruleId":"145","severity":1,"message":"164","line":79,"column":8,"nodeType":"147","endLine":79,"endColumn":10,"suggestions":"165"},{"ruleId":"140","severity":1,"message":"166","line":1,"column":40,"nodeType":"142","messageId":"143","endLine":1,"endColumn":48},{"ruleId":"140","severity":1,"message":"167","line":5,"column":10,"nodeType":"142","messageId":"143","endLine":5,"endColumn":21},{"ruleId":"145","severity":1,"message":"168","line":112,"column":8,"nodeType":"147","endLine":112,"endColumn":10,"suggestions":"169"},{"ruleId":"149","severity":1,"message":"150","line":129,"column":29,"nodeType":"151","endLine":129,"endColumn":112},{"ruleId":"170","severity":1,"message":"171","line":152,"column":37,"nodeType":"151","endLine":153,"endColumn":137},{"ruleId":"149","severity":1,"message":"150","line":175,"column":33,"nodeType":"151","endLine":175,"endColumn":79},{"ruleId":"140","severity":1,"message":"157","line":2,"column":8,"nodeType":"142","messageId":"143","endLine":2,"endColumn":13},{"ruleId":"140","severity":1,"message":"172","line":10,"column":7,"nodeType":"142","messageId":"143","endLine":10,"endColumn":18},{"ruleId":"140","severity":1,"message":"173","line":25,"column":17,"nodeType":"142","messageId":"143","endLine":25,"endColumn":23},{"ruleId":"140","severity":1,"message":"173","line":29,"column":17,"nodeType":"142","messageId":"143","endLine":29,"endColumn":23},{"ruleId":"149","severity":1,"message":"150","line":41,"column":21,"nodeType":"151","endLine":41,"endColumn":104},{"ruleId":"140","severity":1,"message":"157","line":2,"column":8,"nodeType":"142","messageId":"143","endLine":2,"endColumn":13},{"ruleId":"140","severity":1,"message":"157","line":2,"column":8,"nodeType":"142","messageId":"143","endLine":2,"endColumn":13},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'NewPost' is defined but never used.","Identifier","unusedVar","'IoLogoInstagram' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'axiosTimeline' and 'source'. Either include them or remove the dependency array.","ArrayExpression",["176"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'GridContainer' is defined but never used.","'GridItem' is defined but never used.","React Hook useEffect has a missing dependency: 'source'. Either include it or remove the dependency array.",["177"],"'useEffect' is defined but never used.","'axios' is defined but never used.","'IMG' is defined but never used.",["178"],"'Link' is defined but never used.","'TextField' is defined but never used.","'Loading' is defined but never used.","'content' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axiosPost' and 'source'. Either include them or remove the dependency array.",["179"],"'useState' is defined but never used.","'AiFillHeart' is defined but never used.","React Hook useEffect has missing dependencies: 'axiosUser' and 'source'. Either include them or remove the dependency array.",["180"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'borderColor' is assigned a value but never used.","'target' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"183","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [axiosTimeline, source]",{"range":"190","text":"191"},"Update the dependencies array to be: [source]",{"range":"192","text":"193"},{"range":"194","text":"193"},"Update the dependencies array to be: [axiosPost, source]",{"range":"195","text":"196"},"Update the dependencies array to be: [axiosUser, source]",{"range":"197","text":"198"},[2165,2167],"[axiosTimeline, source]",[2921,2923],"[source]",[1312,1314],[2851,2853],"[axiosPost, source]",[4069,4071],"[axiosUser, source]"]